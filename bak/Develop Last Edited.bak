local LrTasks = import 'LrTasks'
local catalog = import "LrApplication".activeCatalog()
local ProgressScope = import 'LrProgressScope'
local dialog = import 'LrDialogs'
local LrView = import 'LrView'
local plugin = _PLUGIN --LrPlugin class
local LrPathUtils = import 'LrPathUtils'
local LrFileUtils = import 'LrFileUtils'
local LrStringUtils = import 'LrStringUtils'

local LrLogger = import 'LrLogger'
local myLogger = LrLogger( 'libraryLogger' )
myLogger:enable( "logfile" ) 

 local tofront = ""

--[[function MyHWLibraryItem.outputToLog( message )
    myLogger:trace( message )
end]]

if WIN_ENV then
    sqlite = LrPathUtils.child( _PLUGIN.path, 'sqlite3.exe' )
else
    sqlite = LrPathUtils.child( _PLUGIN.path, 'sqlite3' )
end

--

--cmd = cmd .. 

--LrTasks.execute(cmd)

LrTasks.startAsyncTask( function()
	local photo = catalog:getTargetPhoto() -- retrieve the active photo // returns nil if no photo selected
    
    --check if a photo was selected
    if not photo then
        return nil, dialog.message("Please select a photo", "No photo seems to be selected. Please select a photo and try again")
    end

    local photoID = photo.localIdentifier
    local filename = photo:getFormattedMetadata ("fileName")
        
--    local outputFile = LrPathUtils.getStandardFilePath( 'temp' )
    local outputFile = "c:\\temp"
    outputFile = LrPathUtils.child( outputFile, "lr_historySteps_output.txt" )
    outputFile = LrFileUtils.chooseUniqueFileName( outputFile )
        
        
    cmd = 'cmd /c ""' .. sqlite .. '" "'.. catalog:getPath() .. '" '
    cmd = cmd .. '"SELECT name,dateCreated FROM main.Adobe_libraryImageDevelopHistoryStep WHERE image LIKE \'%' .. photoID .. '%\' ORDER BY dateCreated DESC LIMIT 1;"'
    cmd = cmd .. " > " .. outputFile .. '"'
--    LrTasks.execute("echo 'test' > C:\\temp\\log.txt")
    
    LrTasks.execute(cmd)
        
    -- initialize variables
    local splitStep = ""
    local testarr = {}
    local historySteps = ""
  	
    -- check if sql output file exists
    local outputFile = "c:\\temp\\lr_historySteps_output.txt"
    local outputExists, outputContents = pcall( LrFileUtils.readFile, outputFile )
    
    local lastEdited = ""
        
    if outputExists then
            outputContents = outputContents:gsub( "[%z\255\254]", "" )
            stepDates = split(outputContents,"\n")
            
            splitStep = split(stepDates[1],"|")
            lastEdited = splitStep[2]
            dateCreated = tonumber(lastEdited) + 978307200
                
            dateCreated = os.date("%A, %B %d, %Y %X",dateCreated)
            
        if outputContents == "" then
            return nil, dialog.message("Hmm...", "Output file looks empty... : " .. outputFile, "critical")
        end
    else
        return nil, dialog.message("No output file", "There is no output file to read from. The catalog query"
                .. " may have failed to create the output file: " .. outputFile, "critical" )
    end

    -- delete temp file
    LrFileUtils.delete(outputFile)
    
        dialog.message( dateCreated, "Last edit time for: " .. filename)
	
end -- function()
) --startAsyncTask

-- .\sqlite3.exe "E:\Pictures\Lightroom Catalog\AIG Photography 2021.lrcat" "SELECT name,dateCreated FROM main.Adobe_libraryImageDevelopHistoryStep WHERE image LIKE'%45099944%';" > sql.txt


--    dialog.message("Hello World", "Please select a photo")

-- SUPPORTING FUNCTIONS

-- split("a,b,c", ",") => {"a", "b", "c"}
function split(s, sep)
    local fields = {}
    
    local sep = sep or " "
    local pattern = string.format("([^%s]+)", sep)
    string.gsub(s, pattern, function(c) fields[#fields + 1] = c end)
    
    return fields
end